{%- set name = name or 'b2500' %}
{%- set friendly_name = friendly_name or name %}
{%- set mqtt = mqtt or {} %}
{%- set mqtt_topic = mqtt.topic or 'b2500' %}
{%- set mqtt_broker = mqtt.broker %}
{%- set mqtt_port = mqtt.port or 1883 %}
{%- set mqtt_user = mqtt.username %}
{%- set mqtt_password = mqtt.password %}
{%- set mqtt_discovery = mqtt.discovery or False %}
{%- set wifi = wifi or {} %}
{%- set wifi_ssid = wifi.ssid %}
{%- set wifi_password = wifi.password %}
{%- set board = board or 'esp32dev' %}
{%- set manual_ip = manual_ip or {} %}
{%- set enable_manual_ip = enable_manual_ip or False %}
{%- set enable_powerzero = enable_powerzero or False %}
{%- set enable_esp_temperature = enable_esp_temperature or False %}
{%- set esp_temperature = esp_temperature or {} %}
{%- set esp_temperature_variant = esp_temperature.variant or 'internal' %}
{%- set enable_powermeter = enable_powermeter or False %}
{%- set powermeter_tx_pin = powermeter.tx_pin or 'GPIO6' %}
{%- set powermeter_rx_pin = powermeter.rx_pin or 'GPIO7' %}
{%- set powermeter_baud_rate = powermeter.baud_rate or 9600 %}
{%- set powermeter_stop_bits = powermeter.stop_bits or 1 %}
{%- set storages = storages or [] %}
{%- set enable_web_server = enable_web_server or False %}
{%- set web_server_port = web_server.port or 80 %}
{%- set enable_ota = enable_ota %}
{%- set ota = ota or {} %}
{%- set ota_password = ota.password or '' %}
{%- set ota_enable_unprotected_writes = ota.enable_unprotected_writes or False %}
{%- set esphome_version = esphome_version or 'latest' %}
{%- set use_modern_ota = (esphome_version == 'latest' or esphome_version >= '2024.6.0') %}
{%- set fallback_hotspot = fallback_hotspot or {} %}
{%- set fallback_hotspot_ssid = fallback_hotspot.ssid or '' %}
{%- set fallback_hotspot_enable_captive_portal = fallback_hotspot.enable_captive_portal or False %}
{%- macro yaml_string(value) %}{% set escaped_value = value | replace('\\', '\\\\') | replace('"', '\\"') %}{{ escaped_value }}{% endmacro %}
{%- macro yaml_lambda_string(value) %}{% set escaped_value = yaml_string(value) | replace('#', '\\#') %}{{ escaped_value }}{% endmacro %}
{%- set _ = '' -%}
esphome:
  name: "{{ yaml_string(name) }}"
  friendly_name: "{{ yaml_string(friendly_name) }}"
{%- if enable_dio_flash_mode %}
  platformio_options:
    board_build.flash_mode: dio
{%- endif %}

esp32:
  board: "{{ yaml_string(board or 'esp32dev') }}"
  {%- if variant != 'auto' %}
  variant: "{{ yaml_string(variant) }}"
  {%- endif %}
  flash_size: {{ flash_size or '4MB' }}
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
      COMPILER_OPTIMIZATION_SIZE: y
    {%- if idf_platform_version %}
    platform_version: "{{ yaml_string(idf_platform_version) }}"
    {%- endif %}

# Enable logging
logger:
  level: {{ log_level or 'INFO' }}

{%- if enable_ota %}
ota:
{%- if use_modern_ota %}
  - platform: esphome
    password: "{{ yaml_string(ota_password) }}"
    {%- if ota_enable_unprotected_writes %}
    unprotected_writes: True # This is mandatory if you want to flash the partition table or bootloader on a Shelly!
    {%- endif %}
{%- else %}
  password: "{{ yaml_string(ota_password) }}"
  {%- if ota_enable_unprotected_writes %}
  unprotected_writes: True # This is mandatory if you want to flash the partition table or bootloader on a Shelly!
  {%- endif %}
{%- endif %}
{%- endif %}

{%- set ref = 'main' %}
{%- if git_sha %}
  {%- set ref = git_sha %}
{%- endif %}
external_components:
  - source:
      type: git
      url: https://github.com/tomquist/esphome-b2500
      ref: "{{ ref }}"
    refresh: 0s
    components: [hame_relay]

wifi:
  ssid: "{{ yaml_string(wifi_ssid) }}"
  password: "{{ yaml_string(wifi_password) }}"
  reboot_timeout: 0s
  fast_connect: True
{%- if enable_manual_ip %}
  manual_ip:
    static_ip: "{{ yaml_string(manual_ip.ip) }}"
    gateway: "{{ yaml_string(manual_ip.gateway) }}"
    subnet: "{{ yaml_string(manual_ip.subnet or '255.255.255.0') }}"
    dns1: "{{ yaml_string(manual_ip.dns or manual_ip.gateway) }}"
{%- endif %}
  on_connect:
    - logger.log:
        level: INFO
        format: "Connected to WiFi."
  on_disconnect:
    - logger.log:
        level: INFO
        format: "Disconnected from WiFi."

{%- if enable_fallback_hotspot %}
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "{{ fallback_hotspot_ssid }}"
{%- endif %}

{%- if enable_web_server %}
web_server:
  port: {{ web_server_port }}
  ota: false
  version: 3
{%- endif %}

{%- if enable_fallback_hotspot and fallback_hotspot_enable_captive_portal %}
captive_portal:
{%- endif %}

mqtt:
  id: mqtt_client
  broker: "{{ yaml_string(mqtt_broker) }}"
  port: {{ mqtt_port }}
{%- if mqtt_user %}
  username: "{{ yaml_string(mqtt_user) }}"
{%- endif %}
{%- if mqtt_password %}
  password: "{{ yaml_string(mqtt_password) }}"
{%- endif %}
  discovery: {% if mqtt_discovery %}True{% else %}False{% endif %}
  topic_prefix: "{{ yaml_string(mqtt_topic) }}"
  log_topic: "{{ yaml_string(mqtt_topic) }}/debug"
  on_connect:
    - logger.log:
        level: INFO
        format: "MQTT connected"
  on_disconnect:
    - logger.log:
        level: INFO
        format: "MQTT disconnected"

hame_relay:
  devices:
{%- for storage in storages %}
    - id: "{{ yaml_string(storage.id) }}"
      mac: "{{ yaml_string(storage.mac_address) | replace(':', '') }}"
{%- endfor %}
  broker: !secret hame_broker
  certificate_authority: !secret hame_certificate_authority
  client_certificate: !secret hame_client_certificate
  client_certificate_key: !secret hame_client_certificate_key

button:
  - platform: restart
    id: controller_restart
    name: "Restart Controller"
    command_topic: "{{ yaml_string(mqtt_topic) }}/restart/set"

{%- if enable_powermeter %}
uart:
  id: uart_bus
  tx_pin: {{ powermeter_tx_pin }}
  rx_pin: {{ powermeter_rx_pin }}
  baud_rate: {{ powermeter_baud_rate }}
  stop_bits: {{ powermeter_stop_bits }}
{%- endif %}

sensor:
{%- if enable_esp_temperature and esp_temperature_variant == 'internal' %}
  - platform: internal_temperature
    name: "Temperature"
    state_topic: "{{ yaml_string(mqtt_topic) }}/esp32/temperature"
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    retain: false
{%- endif %}
{%- if enable_esp_temperature and esp_temperature_variant == 'ntc' %}
  - platform: ntc
    sensor: temp_resistance_reading
    name: "Temperature"
    state_topic: "{{ yaml_string(mqtt_topic) }}/esp32/temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    retain: false
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 10kOhm
  - platform: adc
    id: temp_analog_reading
    pin: GPIO3
    attenuation: 11db
{%- endif %}
{%- if enable_powermeter %}
  - platform: bl0942
    uart_id: uart_bus
    voltage:
      name: 'Voltage'
    current:
      name: 'Current'
    power:
      name: 'Power'
      id: power
    frequency:
      name: "Frequency"
      accuracy_decimals: 2
    update_interval: 5s
  - platform: total_daily_energy
    name: "Energy Daily"
    power_id: power
    unit_of_measurement: kWh
    method: left
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

{%- endif %}
  - platform: uptime
    name: Uptime Sensor
    filters:
      - lambda: return x / 3600.0;
    unit_of_measurement: "hours"
    accuracy_decimals: 2
    state_topic: "{{ yaml_string(mqtt_topic) }}/esp32/uptime"
    retain: false