name: PR Build

on:
  pull_request:
    paths:
      - 'examples/**/*.json'
      - '.github/workflows/pr.yml'
      - 'src/**/*.jinja2'
      - 'components/**/*'

jobs:
  build_examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: 
          - basic-v1
          - basic-v2
          - advanced
        template: 
          - v1
          - v2
          - v2-minimal
        mqtt_enabled:
          - true
          - false
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline
      
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
        shell: bash
      
      - name: Write certificates to secrets.yaml
        run: |
          echo "{}" | yq -P > secrets.yaml
          yq -i '.hame_certificate_authority = strenv(AWS_CA)' secrets.yaml
          yq -i '.hame_client_certificate = strenv(HAME_CERT)' secrets.yaml
          yq -i '.hame_client_certificate_key = strenv(HAME_KEY)' secrets.yaml
          yq -i '.hame_broker = strenv(HAME_BROKER)' secrets.yaml
        env:
          AWS_CA: ${{ secrets.AWS_CA }}
          HAME_CERT: ${{ secrets.HAME_CERT }}
          HAME_KEY: ${{ secrets.HAME_KEY }}
          HAME_BROKER: ${{ secrets.HAME_BROKER }}
        shell: bash

      - name: Generate build password
        id: generate_password
        run: |
          PASSWORD=$(node -e "console.log(require('crypto').randomBytes(16).toString('hex'))")
          echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::$PASSWORD"
      
      - name: Encrypt configuration
        run: |
          cat examples/${{ matrix.example }}.json | jq --arg template_version ${{ matrix.template }} --arg mqtt_enabled ${{ matrix.mqtt_enabled }} '.template_version = $template_version | .mqtt.enabled = ($mqtt_enabled == "true")' > config.json
          echo "ENCRYPTED_CONFIG=$(npx ts-node ./scripts/encrypt-config.ts config.json "${PASSWORD}")" >> $GITHUB_ENV

      - name: Render configuration
        run: node scripts/render.js

      - name: Build firmware
        id: esphome-build
        uses: esphome/build-action@v7.0.0
        with:
          yaml-file: device.yaml

      - name: Create zip with password
        run: |
          zip -P "$PASSWORD" firmware.zip ${{ steps.esphome-build.outputs.name }}/*

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: esphome-firmware-${{ github.event.pull_request.number }}-${{ matrix.example }}-${{ matrix.template }}-${{ matrix.mqtt_enabled }}
          path: firmware.zip

  component_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install esphome pytest

      - name: Run tests
        run: pytest -q
